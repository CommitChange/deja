{
  "name": "bamboo",
  "version": "0.0.2",
  "author": {
    "name": "Roman Shtylman",
    "email": "shtylman@gmail.com"
  },
  "dependencies": {
    "emitter-component": "1.1.0",
    "superagent": "0.15.7",
    "xtend": "2.1.1"
  },
  "scripts": {
    "test": "zuul test/index.js",
    "test-local": "zuul --local 8080 -- test/index.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/defunctzombie/bamboo.git"
  },
  "main": "./index.js",
  "devDependencies": {
    "zuul": "1.0.4",
    "mocha": "1.14.0",
    "express": "3.4.5",
    "after": "0.8.1",
    "uuid": "1.4.1"
  },
  "browser": {
    "emitter": "emitter-component"
  },
  "readme": "# bamboo [![Build Status](https://travis-ci.org/defunctzombie/bamboo.png?branch=master)](https://travis-ci.org/defunctzombie/bamboo)\n\nA model library for client side javascript making it easy to load and persist javascript-object like data structures to/from a backend (typically over ajax) and use them in view/template bindings.\n\n## overview\n\nThe idea behind bamboo is that loading and persisting basic object-ish resources (Plain Old Javascript Objects) should be easy and work well within view/template binding libraries.\n\nTo accomplish this, you define a basic schema for your models and provide a sync function to use. The schema is used to define which properties will emit change events when changed. This plays nicely with view/template libraries that can bind to such events.\n\nComplete documentation can be found on the [wiki] and a simple getting started example is outlined below.\n\n## getting started\n\n### Setup a basic model using a schema\n\nBefore using the model to load or save resources, you must define the properties of the model. This schema will specify how the model reacts when you set these properties.\n\n```javascript\nvar Model = require('bamboo/model');\nvar ajax = require('bamboo/sync/ajax');\n\nvar Post = Model({\n    title: String,\n    author: {\n        name: String,\n        email: String\n    }\n}, { sync: ajax });\n```\n\n### Set a base url\n\nThis will be the basepath for url resources. Typically it will be the `plural` of whatever noun used for the model.\n\n```javascript\nPost.url_root = '/posts';\n```\n\nSee the [sync][wiki-sync] wiki page for an overview of how these routes are used.\n\n### instantiate a new model\n\nCreate a Post instance on the client and persist to the server.\n\n```javascript\nvar post = Post(); // you can also do `new Post()`;\n\npost.title = 'my first post';\npost.author = {\n    name = 'Edgar Poe';\n};\npost.author.name = 'Fannie Poe';\n\n// the above will cause the `post` object to emit events\n// 'change title';\n// 'change author';\n// 'change author.name';\n```\n\nSee the [Emitter][wiki-emitter] wiki page to learn more about how models emit events. All models are instances of an event emitter.\n\n### Persist the model\n\nBamboo persists and loads all models via a configured `sync` function. Bamboo ships with a working ajax function you can use, or you can wrap your favorite ajax library. See the [options][wiki-options] wiki page for details.\n\nIn our example post, we used the bamboo provided ajax `sync` function to persist our models over ajax. Bamboo avoids using globals or state and leaves this up to you to dictate how to build your app; You will need to specify the sync option for every Model you build and wish to persist (not every instance).\n\n```javascript\n// before a new post is saved, is_new() will return true\n// this means the post has no `.id` property\n// post.is_new() === true\n\n// this will make a POST request to '/posts' (the url root)\n// the respons is expected to be an object with an `id` field\n// ideally the full saved object is copied back to us\npost.save(function(err) {\n    // if no error then the following is true\n    // post.id is now set\n    // the model is now saved to the server\n});\n```\n\nSee the [options][wiki-options] wiki page for details on writing a sync function.\n\n### reload a persisted model\n\nOur first model has been persisted to the server; we could load it on another page assuming we know the id of the post we want.\n\n```javascript\nPost.get(id, function(err, post) {\n    // post will be an instanceof Post if found\n});\n```\n\nOr, if we need to get a list of posts\n\n```javascript\nPost.find(function(err, posts) {\n    // posts will be an array with instanceof Post items\n});\n```\n\n### documentation\n\nSee the [wiki] pages and examples for more exotic uses and how a post can contain an array of comments.\n\n## install\n\n```shell\nnpm install bamboo\n```\n\n## view/template libraries\n\nBamboo can play nice with many view/template libraries. Some cool ones to consider:\n\n* [reactive](https://github.com/component/reactive)\n* [ractive.js](http://www.ractivejs.org/)\n\nUsing bamboo with another view/template lib? Let me know!\n\n## inspiration\n\nBamboo draws heavy inspiration from [backbone models](http://backbonejs.org/#Model).\n\n## license\n\nMIT\n\n[wiki]: https://github.com/defunctzombie/bamboo/wiki\n[wiki-emitter]: https://github.com/defunctzombie/bamboo/wiki/Emitter\n[wiki-sync]: https://github.com/defunctzombie/bamboo/wiki/sync\n[wiki-options]: https://github.com/defunctzombie/bamboo/wiki/Model#options\n",
  "readmeFilename": "Readme.md",
  "description": "A model library for client side javascript making it easy to load and persist javascript-object like data structures to/from a backend (typically over ajax) and use them in view/template bindings.",
  "bugs": {
    "url": "https://github.com/defunctzombie/bamboo/issues"
  },
  "_id": "bamboo@0.0.2",
  "dist": {
    "shasum": "44ca97a97e3bbbe36f82c33f093e79718e582847"
  },
  "_from": "bamboo@0.0.2",
  "_resolved": "https://registry.npmjs.org/bamboo/-/bamboo-0.0.2.tgz"
}
